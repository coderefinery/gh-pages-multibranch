# CC-0 (public domain)
# but please link to the source if it's useful for people to more
# easily reuse.

name: gh-pages multibranch
description: Manage multiple branches in gh-pages

inputs:
  directory:  # id of input
    description: 'Directory to multiplex in, also source'
    required: true
    default: 'public'
  cname:
    description: 'CNAME of the repo, if any (default autodetect from repo)'
    default: ''
  default_branch:
    description: "Default branch of the repo (to get the default site)"
    default: 'main'
  publish_branch:
    description: "Github Pages branch"
    default: 'gh-pages'
runs:
  using: "composite"
  steps:
    - name: Info
      shell: bash
      env:
        event_name: ${{ github.event_name }}
        ref: ${{ github.ref }}
        head_ref: ${{ github.head_ref }}
        base_ref: ${{ github.base_ref }}
        default_branch: ${{inputs.default_branch}}
      run: |
        echo "Debugging info"
        set -x
        echo event_name: "${event_name}"
        echo github.ref: "${ref}"
        echo github.base_ref: "${head_ref}"
        echo github.head_ref: "${base_ref}"
        echo refs/heads/+ inputs.default_branch: "refs/heads/${default_branch}"
        echo github.event_name == 'push' , github.ref == "refs/heads/${default_branch}"
        git branch -avv
        git rev-parse --verify gh-pages || true
        git rev-parse --verify remotes/origin/main || true
        git rev-parse --verify remotes/origin/gh-pages || true
        git rev-parse --verify remotes/origin/br1 || true
    - name: Make temporary directory
      id: mktmpdir
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        #echo "::set-output name=tmpdir::$(mktemp -d)"
        echo "tmpdir=$(mktemp -d)" >> $GITHUB_OUTPUT
    - name: Assemble variables
      id: variables
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        default_branch: ${{inputs.default_branch}}
      run: |
        #echo "::set-output name=refheads_default_branch::refs/heads/${default_branch}"
        echo "refheads_default_branch=refs/heads/${default_branch}" >> $GITHUB_OUTPUT
    - name: Find CNAME
      id: cname
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        inputs_cname: ${{inputs.cname}}
        directory: ${{inputs.directory}}
      run: |
        if [ -n "${inputs_cname}" ] ; then
            echo "CNAME from the action input"
            #echo "::set-output name=cname::${inputs_cname}"
            echo "cname=${inputs_cname}" >> $GITHUB_OUTPUT
            exit 0
        elif [ -e "${directory}/CNAME" ] ; then
            echo "CNAME from the publish directory ${directory}"
            #echo "::set-output name=cname::$(cat ${directory}/CNAME)"
            echo "cname=$(cat ${directory}/CNAME)" >> $GITHUB_OUTPUT
            exit 0
        elif [ -e CNAME ] ; then
            echo "CNAME from repository root"
            #echo "::set-output name=cname::$(cat CNAME)"
            echo "name=cname=$(cat CNAME)" >> $GITHUB_OUTPUT
            exit 0
        fi
        echo "CNAME not found"
        #echo "::set-output name=cname::"
        echo "cname=" >> $GITHUB_OUTPUT
    # Clone the old gh-pages branch and copy that to tmpdir, this is
    # the base deployment (we keep all old pages)
    - name: Clone old gh-pages
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        publish_branch: ${{inputs.publish_branch}}
        tmpdir: ${{steps.mktmpdir.outputs.tmpdir}}
      run: |
        echo "Clone old gh-pages branch"
        set -x
        git fetch
        if git rev-parse --verify "remotes/origin/${publish_branch}" ; then
          git branch -- "${publish_branch}" "remotes/origin/${publish_branch}"
          git clone . "--branch=${publish_branch}" ${tmpdir}
        else
          # no branch exists so don't start with anything
          true
        fi
        rm -rf -- "${tmpdir}/.git/"
        mkdir -p -- "${tmpdir}/branch/"
    # If a push and default branch, copy build to _gh-pages/ as the "main"
    # deployment.
    - name: Copy new build (default branch)
      if: ${{ github.event_name == 'push' && github.ref == steps.variables.outputs.refheads_default_branch }}
      shell: bash
      env:
        directory: ${{inputs.directory}}
        cname: ${{ steps.cname.outputs.cname }}
        tmpdir: ${{ steps.mktmpdir.outputs.tmpdir }}
      run: |
        echo "Copy build on default branch"
        set -x
        # Delete everything under _gh-pages/ that is from the
        # primary branch deployment.  Includes the other branches
        # _gh-pages/branch-* paths, and not including
        # _gh-pages itself.
        ( cd "${tmpdir}" &&
          find . -mindepth 1 ! -path './branch' ! -path './branch/*' -delete
        )
        rsync -raiv -- "${directory}/" "${tmpdir}/"
        if [ -n "${cname}" ] ; then
            echo ::notice "title=Preview link::Default site available at https://${cname}/"
        else
            echo ::notice "title=Preview link::Default site available at https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}/"
        fi
    # If a push and not on default branch, then copy the build to
    # _gh-pages/branch/$brname (transforming '/' into '--')
    - name: Copy new build (non-default branch)
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        ref: ${{github.ref}}
        tmpdir: ${{steps.mktmpdir.outputs.tmpdir}}
        cname: ${{ steps.cname.outputs.cname }}
        directory: ${{inputs.directory}}
      run: |
        echo "Copy build branch/ directory"
        set -x
        #brname=$(git rev-parse --abbrev-ref HEAD)
        brname="${ref}"
        brname="${brname##refs/heads/}"
        brdir="${brname//\//--}"   # replace '/' with '--'
        rm -rf -- "${tmpdir}/branch/${brdir}"
        rsync -raiv -- "${directory}/" "${tmpdir}/branch/${brdir}/"
        if [ -n "${cname}" ] ; then
            echo ::notice "title=Branch preview link::Branch can be previewed at https://${cname}/branch/${brdir}/"
        else
            echo ::notice "title=Branch preview link::Branch can be previewed at https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}/branch/${brdir}/"
        fi
    # Go through each branch in _gh-pages/branch/, if it's not a
    # ref, then delete it.
    - name: Delete old feature branches
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        tmpdir: ${{ steps.mktmpdir.outputs.tmpdir }}
      run: |
        echo "Delete old feature branches"
        set -x
        for brdir in ${tmpdir}/branch/* ; do
            # no matching files gives only the pattern back, exclude it
            if [ ! -e "$brdir" ] ; then continue ; fi
            # Find the branch name from filename
            brname="${brdir##*/}"   # strip leading */
            brname="${brname//--/\/}"   # replace '--' with '/'
            # Verify existence or remove
            if ! git rev-parse --verify "remotes/origin/$brname" ; then
                echo "Removing $brdir"
                rm -r -- "$brdir/"
            fi
        done
    # Rsync the whole multiplexed path back to the original input
    # directory
    - name: Copy multipages directory back
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        directory: ${{inputs.directory}}
        tmpdir: ${{ steps.mktmpdir.outputs.tmpdir }}
      run: |
        echo "Copy multipages directory back"
        set -x
        rm -r -- "${directory}"
        rsync -raiv -- "${tmpdir}/" "${directory}/"
