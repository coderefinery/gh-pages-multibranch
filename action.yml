name: gh-pages multibranch
description: Manage multiple branches in gh-pages

inputs:
  directory:  # id of input
    description: 'Directory to multiplex in, also source'
    required: true
    default: 'public'
  default_branch:
    description: "Default branch of the repo (to get the default site)"
    default: 'main'
  branch:
    description: "Github Pages branch"
    default: gh-pages
runs:
  using: "composite"
  steps:
    - name: Make temporary directory
      id: mktmpdir
      if: ${{ github.event_name == 'push' }}
      run:
        echo "::set-output name=tmpdir::$(mktemp -d)"
    - name: Clone old gh-pages
      if: ${{ github.event_name == 'push' }}
      run: |
        set -x
        git fetch
        ( git branch ${{ inputs.branch }} remotes/origin/${{ inputs.branch }} && git clone . --branch=gh-pages ${{ steps.mktempdir.outputs.tmpdir }} )
        rm -rf ${{ steps.mktempdir.outputs.tmpdir }}/.git/
        mkdir -p ${{ steps.mktempdir.outputs.tmpdir }}/branch/
    # If a push and default branch, copy build to _gh-pages/ as the "main"
    # deployment.
    - name: Copy new build (default branch)
      if: |
        contains(github.event_name, 'push') &&
        github.ref == join(['refs/heads/', inputs.default_branch], '')
      run: |
        set -x
        # Delete everything under _gh-pages/ that is from the
        # primary branch deployment.  Eicludes the other branches
        # _gh-pages/branch-* paths, and not including
        # _gh-pages itself.
        ( cd ${{ steps.mktempdir.outputs.tmpdir }} &&
          find . -mindepth 1 ! -path './branch*' -delete
        )
        rsync -a ${{inputs.directory}} ${{ steps.mktempdir.outputs.tmpdir }}
    # If a push and not on default branch, then copy the build to
    # _gh-pages/branch/$brname (transforming '/' into '--')
    - name: Copy new build (branch)
      if: |
        contains(github.event_name, 'push') &&
        github.ref != join(['refs/heads/', inputs.default_branch], '')
      run: |
        set -x
        #brname=$(git rev-parse --abbrev-ref HEAD)
        brname="${{github.ref}}"
        brname="${brname##refs/heads/}"
        brdir=${brname//\//--}   # replace '/' with '--'
        rm -rf   ${{steps.mktempdir.outputs.tmpdir}}/branch/${brdir}
        rsync -a ${{inputs.directory}} ${{steps.mktempdir.outputs.tmpdir}}/branch/${brdir}
    # Go through each branch in _gh-pages/branch/, if it's not a
    # ref, then delete it.
    - name: Delete old feature branches
      if: ${{ github.event_name == 'push' }}
      run: |
        set -x
        cd ${{ steps.mktempdir.outputs.tmpdir }}
        for brdir in `ls branch/` ; do
            brname=${brdir//--/\/}   # replace '--' with '/'
            if ! git show-ref remotes/origin/$brname ; then
                echo "Removing $brdir"
                rm -r ./branch/$brdir/
            fi
        done
    - name: Copy multipages directory back
      run: |
        set -x
        rm -r ${{inputs.directory}}
        rsync -raiv ${{ steps.mktempdir.outputs.tmpdir }}/ ${{inputs.directory}}/
